M   V   C
o   i   o
d   e   n
e   w   t
l       r
        o
	l
	l
	e
	r

Model      -> manipulação dos dados
View       -> interação do usuário
Controller -> camada de controle

---------------------------------------------

https://

camadas->
          1     Aplicaçao      http
	  2     Transport      protocolo tcp
          3     Rede           ip
          4     Física         


saber os metodos http

---------------------------------------------

Regra de negócio -> são aqueles requisitos que são essencial para o soft



Requisito Funcional ->



Requisito não Funcional ->

---------------------------------------------

A aplicacao roda no sistema operacional cria uma aplicacao desktop

https://www.electronjs.org/pt/

---------------------------------------------
https://ejs.co/

https://expressjs.com/pt-br/

---------------------------------------------

Mudar o ->

//para expecifica aonde esta o codigo do projeto
"rootDir": "./src",                          /* Specify the root folder within your source files. */


// seria para criar uma pasta com a tradução por javascript
"outDir": "./dist",                         /* Specify an output folder for all emitted files. */
  
---------------------------------------------  

Os comandos ->

PS C:\DevC\projetonew> npx tsc
serve para fazer a tradução das linguagens


PS C:\DevC\projetonew> npx ts-node ./src/script.ts
ele faz roda o codigo do script.ts

PS C:\DevC\projetonew> npm install express
fazer esse comando despois de criar o server.ts na pasra src

PS C:\DevC\projetonew> npm install --save-dev @types/express

PS C:\DevC\projeto> npx ts-node ./src/server.ts
para inicializar o servido


passo a passo para nao precisa fica fechando o servido toda hora
PS C:\DevC\projeto> npm install ts-node-dev
PS C:\DevC\projeto> npx ts-node-dev ./src/server.ts

---------------------------------------------

Instala o DotENV, Thunder Client, Prisma, sqlite

Cria no src para cria um arquivo views/index.html

---------------------------------------------

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

//funcao assincrona
async function main() {
    try{
        const newUser = await prisma.user.create({
            data: {
                name: "kimberly",
                email: "kimberly@gmail.com"
            }
        })
        
        console.log(newUser)
        
    }catch(error){
        console.log(error)
    }
  
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })



---------------------------------------------

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String     @id @default(uuid())
  email String  @unique
  name  String?
  posts Post[]
  comments Comment[]
}

model Post {
  id    String     @id @default(uuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User    @relation(fields: [authorId], references: [id])
  authorId  String
  comments Comment[]
}

model Comment {
  id    String     @id @default(uuid())
  title String
  content String
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
}
